package database

import (
	"context"
	"database/sql"
	"time"

	_ "github.com/jackc/pgx/v5/stdlib"
)

var (
	Database *sql.DB
)

func NewConnection(dsn string) (err error) {
	Database, err = sql.Open("pgx", dsn)
	if err != nil {
		return
	}

	query := `CREATE TABLE IF NOT EXISTS public.url
			(
				id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
				short_url character varying COLLATE pg_catalog."default",
				original_url character varying COLLATE pg_catalog."default",
				CONSTRAINT url_pk PRIMARY KEY (id)
			)`

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	_, err = Database.ExecContext(ctx, query)

	return
}

func CloseConnection() {
	Database.Close()
}

func CheckConnection() error {
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	err := Database.PingContext(ctx)

	return err
}
